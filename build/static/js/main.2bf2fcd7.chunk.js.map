{"version":3,"sources":["components/MultiSelector.jsx","components/SingleSelector.jsx","components/CreatableMultiSelector.jsx","components/Tooltip.jsx","constants.js","redux/reducers/dashboardSlice.js","components/Dashboard.jsx","helpers/record.js","redux/reducers/globalSlice.js","helpers/boundaries.js","helpers/colours.js","components/GlobalView.jsx","redux/reducers/chunkSlice.js","components/ChunkView.jsx","components/SubregionView.jsx","dataFileManager.js","components/Track.jsx","components/Legend.jsx","App.jsx","redux/reducers/subregionSlice.js","index.js"],"names":["MultiSelector","props","useState","selection","setSelection","buttonLabel","className","label","isMulti","name","options","Object","values","classNamePrefix","onChange","event","choices","i","length","push","defaultValue","onClick","minElementRequirement","handleChange","alert","SingleSelector","current","toUpperCase","value","CreatableMultiSelector","x","y","style","word","DEFAULT_DATA_TYPE","componentHeight","componentWidth","window","innerWidth","existingOptions","LITERATURE","legendLabel","headers","dashboard","1","PRIDE_AND_PREJUDICE","EMMA","SENSE_AND_SENSIBILITY","ALICES_ADVENTURES_IN_WONDERLAND","creatable","2","ALL_WORDS","THE","A","PREJUDICE","LOVE","RICH","initialState","dataType","keys","reduce","data","k","changeTooltipVisibility","vis","type","payload","Dashboard","dispatch","useDispatch","state","useSelector","isTooltipVisible","tooltipData","handleMenuChange","newSelection","menuNumber","changeMenu1Selection","changeMenu2Selection","elements","map","el","sel","e","stopPropagation","Tooltip","dashboardState","initializeRecord","intialValue","chunkSelection","concat","findBoundariesOfCharacteristic","characteristic","low","Infinity","high","key","val","setColourScheme","colourscale","interpolateOrRd","GlobalView","canvasRef","useRef","id","width","proportions","totalElements","accumulator","elem","computeProportions","filters","trackHeight","identifier","replaceAll","draw","ctx","clearRect","canvas","height","newStart","rectWidth","unit","chunkStart","beginPath","font","fillStyle","fillText","strokeStyle","moveTo","lineTo","stroke","f","toLowerCase","colour","colourScale","fillRect","useEffect","context","getContext","rect","getBoundingClientRect","boundaries","chunkEnd","calculateGroupBoundaries","canvasRect","currentTarget","selectedChunk","pageX","left","mouseX","start","end","identifySelectedChunk","clientX","ref","changeSliderBoundaries","newSliderBoundaries","ChunkView","getStartAndEnd","target","xPosition","parseFloat","getAttribute","indexOf","slice","Math","abs","interact","draggable","inertia","listeners","move","dx","webkitTransform","transform","setAttribute","temp","resizable","edges","right","bottom","top","deltaRect","modifiers","restrictEdges","outer","restrictSize","min","SubregionView","elemEnd","getSliderSelection","calculatedSelection","onMouseMove","pageY","pageWidth","document","body","pageYOffset","selectionIndex","floor","changeTooltipData","onMouseLeave","dataFileManager","Pride_and_Prejudice_data","Alice_Wonderland_data","Sense_and_Sensibility_data","Track","trackType","tracks","constructElement","trackData","constructTrack1","constructTrack2","constructTrack3","t","Legend","startY","App","scaleLog","domain","range","store","configureStore","reducer","action","assign","global","chunk","subregion","ReactDOM","render","StrictMode","path","element","getElementById"],"mappings":"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","file":"static/js/main.2bf2fcd7.chunk.js","sourcesContent":["import React, { useState } from \"react\";\nimport Select from \"react-select\";\n\nconst MultiSelector = (props) => {\n  const [selection, setSelection] = useState([]);\n  const [buttonLabel, setButtonLabel] = useState(\"Filter\");\n\n  // update selection list as it changes\n  const handleChange = (event) => {\n    var choices = [];\n    for (let i = 0; i < event.length; i++) {\n      choices.push(event[i][\"value\"]);\n    }\n    setSelection(choices);\n  };\n\n  // check selection and then submit it\n  const handleClick = () => {\n    if (selection.length >= props.minElementRequirement) props.handleChange(selection);\n    else alert(`Select at least ${props.minElementRequirement} item(s) to display in the map.`);\n  };\n\n  return (\n    <div className=\"dashboard-container dashboard-related\">\n      <p>{props.label}</p>\n        <Select\n          isMulti\n          name={props.label}\n          options={Object.values(props.options)}\n          className=\"basic-multi-select\"\n          classNamePrefix=\"select\"\n          onChange={handleChange}\n          defaultValue={Object.values(props.options)[0]}\n        />\n\n      <button className=\"basic-button filter-button\" onClick={handleClick}>\n        {buttonLabel}\n      </button>\n    </div>\n  );\n};\n\nexport default MultiSelector;\n","import React from \"react\";\nimport Select from \"react-select\";\n\nconst SingleSelector = (props) => {\n  const onChange = (event) => {\n    props.handleChange(event.value);\n  }\n\n  const current = props.current === null ? null : props.options[props.current.toUpperCase()];\n\n  return (\n    <div className=\"dashboard-container dashboard-related\">\n      <p>{props.label}</p>\n      <Select\n        defaultValue={current}\n        options={Object.values(props.options)}\n        onChange={onChange}\n      />\n    </div>\n  );\n};\n\nexport default SingleSelector;\n","import React, { useState } from \"react\";\nimport CreatableSelect from \"react-select/creatable\";\n\n// allows the user to add their own typed-in option to dropdown\nconst CreatableMultiSelector = (props) => {\n\n    const [selection, setSelection] = useState([]);\n    const [buttonLabel, setButtonLabel] = useState(\"Filter\");\n    \n    const handleChange = (event) => {\n        var choices = [];\n        for (let i = 0; i < event.length; i++) {\n          choices.push(event[i][\"value\"]);\n        }\n        setSelection(choices);\n    }\n\n    const handleClick = () => {\n        if (selection.length >= props.minElementRequirement) props.handleChange(selection);\n        else alert(`Select at least ${props.minElementRequirement} item(s) to display in the map.`);\n    }\n\n    return (\n        <div className=\"dashboard-container dashboard-related\">\n            <p>{props.label}</p>\n            <CreatableSelect \n                isMulti\n                name={props.label}\n                onChange={handleChange}\n                options={Object.values(props.options)}\n                defaultValue={[Object.values(props.options)[0]]}        \n            />\n        <button className=\"basic-button filter-button\" onClick={handleClick}>\n            {buttonLabel}\n        </button>\n        </div>\n    );\n}\n\nexport default CreatableMultiSelector;","import React from 'react';\n\nexport default ({selection={}, x, y}) => {\n\n    return (\n        <div className='graph-tooltip' style={{ 'left': x, 'top': y }}>\n             {selection.word && <p><b>Word: </b>{selection.word}</p>}\n        </div>\n    );\n}\n\n","export const DEFAULT_DATA_TYPE = \"LITERATURE\";\n\nexport const componentHeight = 75;\n\nexport const margin = 3;\n\nexport const componentWidth = window.innerWidth * 0.90;\n\nexport const sliderWidth = 50;\n\nexport const minSliderWidth = 10;\n\nexport const existingOptions = {\n  LITERATURE: {\n    label: \"Literature\",\n    value: \"LITERATURE\",\n    legendLabel: \"Word length\",\n    headers: [\"Book\", \"Chapter\", \"Subsection\"],\n    dashboard: {\n      1: {\n        label: \"Book\",\n        options: {\n          PRIDE_AND_PREJUDICE: {\n            label: \"Pride and Prejudice\",\n            value: \"PRIDE_AND_PREJUDICE\"\n          },\n          EMMA: {\n            label: \"Emma\",\n            value: \"EMMA\"\n          },\n          SENSE_AND_SENSIBILITY: {\n            label: \"Sense and Sensibility\",\n            value: \"SENSE_AND_SENSIBILITY\"\n          },\n          ALICES_ADVENTURES_IN_WONDERLAND: {\n            label: \"Alice's Adventures in Wonderland\",\n            value: \"ALICES_ADVENTURES_IN_WONDERLAND\"\n          },\n        },\n        minElementRequirement: 1,\n        creatable: false,\n      },\n      2: {\n        label: \"Words\",\n        options: {\n          ALL_WORDS: {\n            label: \"All words\",\n            value: \"ALL_WORDS\"\n          },\n          THE: {\n            label: \"the\",\n            value: \"THE\"\n          },\n          A: {\n            label: \"a\",\n            value: \"A\"\n          },\n          PREJUDICE: {\n            label: \"prejudice\",\n            value: \"PREJUDICE\"\n          },\n          LOVE: {\n            label: \"love\",\n            value: \"LOVE\"\n          },\n          RICH: {\n            label: \"rich\",\n            value: \"RICH\"\n          },\n        },\n        minElementRequirement: 1,\n        creatable: true,\n      }\n    }\n  },\n};\n\n\n\n","import { existingOptions, DEFAULT_DATA_TYPE } from \"../../constants\";\n\nlet initialState = {\n    dataType: DEFAULT_DATA_TYPE,\n    ...Object.keys(existingOptions[DEFAULT_DATA_TYPE][\"dashboard\"]).reduce((data, k) => {\n        data[k] = [Object.keys(existingOptions[DEFAULT_DATA_TYPE][\"dashboard\"][k][\"options\"])[0]];\n        return data;\n    }, {})\n}\n\ninitialState = {...initialState, \"colourscale\": null, \"isTooltipVisible\": false, \"tooltipData\": null};\n\nexport const changeDataTypeSelection = (newDataType) => {\n    return {\n        type: \"dashboard/dataTypeSelectionChanged\",\n        payload: newDataType\n    };\n}\n\nexport const changeMenu1Selection = (newSelection) => {\n    return {\n        type: \"dashboard/menu1SelectionChanged\",\n        payload: newSelection\n    };\n}\n\nexport const changeMenu2Selection = (newSelection) => {\n    return {\n        type: \"dashboard/menu2SelectionChanged\",\n        payload: newSelection\n    };\n}\n\nexport const changeColourScale = (newScale) => {\n    return {\n        type: \"dashboard/colourScaleChanged\",\n        payload: newScale\n    }\n}\n\nexport const changeTooltipVisibility = (vis) => {\n    return {\n        type: \"dashboard/tooltipVisibilityChanged\",\n        payload: vis\n    }\n}\n\nexport const changeTooltipData = (data) => {\n    return {\n        type: \"dashboard/tooltipDataChanged\",\n        payload: data\n    }\n}\n\nexport const dashboardReducer = (state = initialState, action) => {\n    switch(action.type) {\n        case \"dashboard/dataTypeSelectionChanged\":\n            return action.payload;\n        case \"dashboard/menu1SelectionChanged\":\n            return {\n                ...state,\n                1: action.payload\n            };\n        case \"dashboard/menu2SelectionChanged\":\n            return {\n                ...state,\n                2: action.payload\n            };\n        case \"dashboard/colourScaleChanged\":\n            return {\n                ...state,\n                \"colourscale\": action.payload\n            };\n        case \"dashboard/tooltipVisibilityChanged\":\n            return Object.assign({}, state, { \"isTooltipVisible\": action.payload })\n        case \"dashboard/tooltipDataChanged\":\n            return Object.assign({}, state, { \"tooltipData\": action.payload})\n        default:\n            return state;\n    };\n}\n","import React from \"react\";\nimport { useSelector, useDispatch } from \"react-redux\";\nimport \"../main.css\";\nimport MultiSelector from \"./MultiSelector\";\nimport SingleSelector from \"./SingleSelector\";\nimport CreatableMultiSelector from \"./CreatableMultiSelector\";\nimport Tooltip from \"./Tooltip\";\nimport { existingOptions } from \"../constants\";\nimport { changeDataTypeSelection, changeMenu1Selection, changeMenu2Selection } from \"../redux/reducers/dashboardSlice\";\n\nconst Dashboard = () => {\n    const dispatch = useDispatch();\n    const state = useSelector(state => state);\n    const dataType = state[\"dashboard\"][\"dataType\"];\n    const isTooltipVisible = state.dashboard.isTooltipVisible;\n    const tooltipData = state.dashboard.tooltipData;\n\n    // user changes the type of data shown in the map\n    const handleDataTypeChange = (newSelection) => {\n        const dashboardState = {\n            dataType: newSelection,\n            ...Object.keys(existingOptions[newSelection][\"dashboard\"]).reduce((data, k) => {\n                data[k] = [Object.keys(existingOptions[newSelection][\"dashboard\"][k][\"options\"])[0]];\n                return data;\n            }, {})\n        }\n        dispatch(changeDataTypeSelection(dashboardState));\n    }\n\n    // new selection in the secondary menus\n    const handleMenuChange = (newSelection, menuNumber) => {\n        if (menuNumber === 1) dispatch(changeMenu1Selection(newSelection));\n        else if (menuNumber === 2) dispatch(changeMenu2Selection(newSelection));\n    }\n\n    const elements = Object.values(existingOptions[dataType][\"dashboard\"]).map((el, i) => {\n        return (\n            // not every dropdown should support the user typing in a new option\n            el[\"creatable\"]\n            ?\n            <CreatableMultiSelector \n                key={`${el[\"label\"]}-sel-${i}`}\n                label={el[\"label\"]}\n                handleChange={sel => handleMenuChange(sel, i+1)}\n                options={el[\"options\"]}\n                minElementRequirement={el[\"minElementRequirement\"]} \n            />\n            :\n            <MultiSelector \n                key={`${el[\"label\"]}-sel-${i}`}\n                label={el[\"label\"]} \n                handleChange={sel => handleMenuChange(sel, i+1)}\n                options={el[\"options\"]}\n                minElementRequirement={el[\"minElementRequirement\"]} \n            />\n        );\n    });\n\n    {/* stopPropagation prevents selecting a chromosome when the clade dropdown is open */}\n    return (\n        <div\n            className=\"dashboard-stack\"\n            onClick={(e) => e.stopPropagation()}\n        >\n            {isTooltipVisible && <Tooltip {...tooltipData} />}\n            <SingleSelector\n                label=\"Data type\"\n                current={Object.keys(existingOptions)[0]}\n                options={existingOptions}\n                handleChange={handleDataTypeChange}\n            />\n            {elements}\n        </div>\n    );\n}\n\nexport default Dashboard;","// Used to create a list of all selected genomes with a spec. init value\nexport const initializeRecord = (keys, intialValue) => {\n    return keys.reduce((data, k) => {\n        data[k] = intialValue;\n        return data;\n    }, {})\n}\n","import { existingOptions } from \"../../constants\";\nimport { initializeRecord } from \"../../helpers/record\";\n\nconst initialOptions = Object.values(existingOptions).reduce((data, k) => {\n    const newData = data.concat(Object.keys(k[\"dashboard\"][1][\"options\"]));\n    return newData;\n}, []);\n\n\nconst initialState = {\n    chunkSelection: initializeRecord(initialOptions, 1),\n}\n\nexport const changeChunkSelection = (newChunkSelection) => {\n    return {\n        type: \"global/chunkSelectionChanged\",\n        payload: newChunkSelection\n    };\n}\n\nexport const globalReducer = (state = initialState, action) => {\n    switch(action.type) {\n        case \"global/chunkSelectionChanged\":\n            const { id, chunk } = action.payload;\n            return {\n                ...state,\n                chunkSelection: {\n                    ...state[\"chunkSelection\"],\n                    [id]: chunk\n                }\n            };\n        default:\n            return state;\n    };\n}\n","import { margin, componentWidth } from \"../constants\";\n\nexport const computeProportions = (data) => {\n    const totalElements = Object.values(data).reduce((accumulator, elem) => {\n      return accumulator + elem.length;\n    }, 0);\n\n    let proportions = {};\n    for (let key in data) {\n      proportions[key] = data[key].length / totalElements;\n    }\n\n    return proportions;\n}\n\nexport const findBoundariesOfCharacteristic = (data, characteristic) => {\n    let low = Infinity;\n    let high = -Infinity;\n    for (let key in data) {\n      for (let i=0; i < data[key].length; i++) {\n        const val = data[key][i][characteristic];\n        if (val < low) low = val;\n        else if (val > high) high = val;\n      }\n    }\n    return {\"low\": low, \"high\": high}\n}\n\nexport const calculateGroupBoundaries = (data, proportions, width, rect) => {\n    let boundaries = {};\n    let newStart = 0;\n    \n    \n    for (let key in data) {\n      const rectWidth = width * proportions[key];\n      const unit = rectWidth / data[key].length;\n      const chunkStart = ((key - 1) * margin) + newStart;\n      const chunkEnd = chunkStart + (unit * data[key].length);\n      //boundaries[key] = {\"start\": chunkStart, \"end\": chunkStart + rectWidth};\n      boundaries[key] = {\"start\": chunkStart, \"end\": chunkEnd};\n      \n      newStart = newStart + (chunkEnd - chunkStart);\n      //newStart = newStart + rectWidth;\n    }\n    //console.log(boundaries)\n    return boundaries;\n}\n\nexport const identifySelectedChunk = (mouseX, data, boundaries) => {\n  \n    for (let key in data) {\n      // Determine if click is on a chunk\n      const { start, end } = boundaries[key];\n      //console.log(start, end, mouseX)\n      if (mouseX >= start && mouseX <= end) {\n        //console.log(start, end, mouseX)\n        return key;\n      }\n    }\n    return null;\n  }\n\nexport const getSliderSelection = (data, dataType, start, end) => {\n  let sel = [];\n  const unit = componentWidth / data.length;\n  const lowest = data[0].start;\n  for (let i=0; i<data.length; i++) {\n    const elemStart = unit * i;\n    const elemEnd = unit + (unit * i);\n    if (elemStart >= start && elemEnd <= end) {\n      sel.push(data[i]);\n\n      // if (dataType === \"GENE_DENSITY\") {\n      //   const elemStart = unit * i;\n      //   const elemEnd = unit + (unit * i);\n        \n      //   if (elemStart >= start && elemEnd <= end) {\n      //       sel.push(data[i]);\n      //   }\n      // }\n      // else {\n      //   console.log(lowest, elemStart, elemEnd, componentWidth, start, end)\n      //   //console.log(data[i], lowest, start, end)\n      //   if (data[i].start - lowest >= start && data[i].end - lowest <= end) {\n      //     sel.push(data[i]);\n      //   }\n      }    \n      else if (elemEnd === componentWidth) sel.push(data[i]);   \n  }\n  return sel;\n}","import { interpolateRdBu, interpolateReds, interpolateOrRd } from \"d3\";\n\nexport const setColourScheme = (colourscale, value) => {\n    return interpolateOrRd(colourscale(value));\n}","import React, { useEffect, useRef } from \"react\";\nimport { useSelector, useDispatch } from \"react-redux\";\nimport { changeChunkSelection } from \"../redux/reducers/globalSlice\";\nimport { componentHeight, componentWidth, margin, existingOptions } from \"../constants\";\nimport { \n  calculateGroupBoundaries, \n  findBoundariesOfCharacteristic, \n  computeProportions,\n  identifySelectedChunk } from \"../helpers/boundaries\";\nimport { setColourScheme } from \"../helpers/colours\";\n\nconst GlobalView = (props) => {\n  const canvasRef = useRef(null);\n  const state = useSelector(state => state);\n  const dispatch = useDispatch();\n\n  const dataType = state[\"dashboard\"][\"dataType\"];\n  const data = props.data;\n  const chunkSelection = state[\"global\"][\"chunkSelection\"][props.id];\n  const { low, high } = findBoundariesOfCharacteristic(data, \"length\");\n  const width = componentWidth - (margin * (Object.keys(data).length + 1))\n  const proportions = computeProportions(data);\n  const filters = state[\"dashboard\"][2];\n  const trackHeight = componentHeight / filters.length;\n\n  const headers = existingOptions[dataType][\"headers\"];\n  \n  let identifier = props.id;\n  if (dataType === \"LITERATURE\") identifier = data[1][0][\"title\"].toUpperCase().replaceAll(\" \", \"_\").replaceAll(\"\\u2019\", \"\");\n\n  const draw = (ctx, data) => {\n    ctx.clearRect(0, 0, ctx.canvas.width, ctx.canvas.height)\n\n    let newStart = 0;\n    for (let key in data) {\n\n      const rectWidth = width * proportions[key];\n      const unit = rectWidth / data[key].length;\n      // chunk starts at 1 but we need to start at 0\n      const chunkStart = ((key - 1) * margin) + newStart;\n\n      // label chunk with its number\n      ctx.beginPath();\n      ctx.font = \"8px Arial\";\n      ctx.fillStyle = 'grey';\n      ctx.fillText(key, chunkStart + ((data[key].length*unit)/4), componentHeight + 13);\n\n      // indicate selected chunk\n      if (chunkSelection == key) {\n        ctx.strokeStyle = \"white\";\n        ctx.beginPath();\n        ctx.moveTo(chunkStart, componentHeight + 3);\n        ctx.lineTo(chunkStart + (unit * data[key].length), componentHeight + 3);\n        ctx.stroke();\n      }\n\n      // if word filter is applied, then only draw specific words\n      for (let f=0; f<filters.length; f++) {\n        for (let i=0; i < data[key].length; i++) {\n          if (filters[f] === \"ALL_WORDS\" || filters[f].toLowerCase() === data[key][i][\"word\"]) {\n            const colour = setColourScheme(props.colourScale, data[key][i][\"length\"]);\n            ctx.fillStyle = colour;\n            ctx.fillRect(chunkStart + (i*unit), trackHeight*f, unit-0.5, trackHeight);\n          }\n        } \n      }\n      newStart += rectWidth;\n    }\n  }\n\n  // update chunk selection when the user clicks on a chunk\n  const selectChunk = (event) => {\n    let rect = canvasRef.current.getBoundingClientRect();\n    const boundaries = calculateGroupBoundaries(data, proportions, width, rect);\n\n    const canvasRect = event.currentTarget.getBoundingClientRect();\n    const xPos = event.pageX - canvasRect.left;\n    \n    const actualX = event.clientX - rect.x;\n    // No need to check for y position since the canvas = track height\n    const selectedChunk = identifySelectedChunk(actualX, data, boundaries)\n    if (selectedChunk !== null) {\n      dispatch(changeChunkSelection({\"id\": identifier, \"chunk\": selectedChunk}));\n    }\n  }\n\n  useEffect(() => {\n    const canvas = canvasRef.current;\n    const context = canvas.getContext('2d');\n\n    draw(context, data)\n  }, [draw]);\n  \n  return (\n    <div>\n      <canvas \n        className=\"global-view\" \n        width={componentWidth} \n        height={componentHeight+20}\n        onClick={selectChunk} \n        ref={canvasRef} \n        // {...props} \n      />\n    </div>\n\n  )\n};\nexport default GlobalView;","import { existingOptions } from \"../../constants\";\nimport { initializeRecord } from \"../../helpers/record\";\n\nconst initialOptions = Object.values(existingOptions).reduce((data, k) => {\n    const newData = data.concat(Object.keys(k[\"dashboard\"][1][\"options\"]));\n    return newData;\n}, []);\n\nconst initialState = initializeRecord(initialOptions, {\"start\": 0, \"end\": 50, \"width\": 50, \"data\":{}});\n\nexport const changeSliderBoundaries = (newSliderBoundaries) => {\n    return {\n        type: \"chunk/sliderBoundariesChanged\",\n        payload: newSliderBoundaries\n    };\n}\n\nexport const changeSliderWidth = (newSliderWidth) => {\n    return {\n        type: \"chunk/sliderWidthChanged\",\n        payload: newSliderWidth\n    };\n}\n\nexport const changeSliderSelection = (newSliderSelection) => {\n    return {\n        type: \"chunk/sliderSelectionChanged\",\n        payload: newSliderSelection\n    }\n}\n\n\nexport const chunkReducer = (state = initialState, action) => {\n    switch(action.type) {\n        case \"chunk/sliderBoundariesChanged\":\n            const { id, boundaries } = action.payload;\n            return {\n                ...state,\n                [id]: Object.assign({}, state[id], boundaries)\n            };\n        case \"chunk/sliderSelectionChanged\":\n            return {\n                ...state,\n\n            }\n        default:\n            return state;\n    };\n}\n","import React, { useEffect, useRef } from \"react\";\nimport { useSelector, useDispatch } from \"react-redux\";\nimport { scaleLinear, interpolateReds, interpolateMagma, interpolateRdBu, filter } from \"d3\";\nimport interact from \"interactjs\";\nimport { changeSliderBoundaries } from \"../redux/reducers/chunkSlice\";\nimport { componentHeight, componentWidth, sliderWidth, existingOptions } from \"../constants\";\nimport { findBoundariesOfCharacteristic } from \"../helpers/boundaries\";\nimport { setColourScheme } from \"../helpers/colours\";\n\nconst ChunkView = (props) => {\n  const canvasRef = useRef(null);\n  const state = useSelector(state => state);\n  const dispatch = useDispatch();\n  const chunkSelection = state[\"global\"][\"chunkSelection\"][props.id];\n  const dataType = state[\"dashboard\"][\"dataType\"];\n  const filters = state[\"dashboard\"][2];\n  const { low, high } = findBoundariesOfCharacteristic(props.data, \"length\");\n  const data = props.data[chunkSelection];\n  //bookData[chunkSelection];\n  const headers = existingOptions[dataType][\"headers\"];\n  const trackHeight = componentHeight / filters.length;\n\n  let identifier = props.id;\n  if (dataType === \"LITERATURE\") identifier = data[0][\"title\"].toUpperCase().replaceAll(\" \", \"_\").replaceAll(\"\\u2019\", \"\");\n  \n// grab slider attributes\nconst getStartAndEnd = (target) => {\n  let xPosition = (parseFloat(target.getAttribute('data-x')) || 0),\n      width = target.style.width;\n  if (width.indexOf('px') > -1) {\n      width = +width.slice(0, -2);\n  }\n  else {\n      width = sliderWidth;\n  }\n  const start = Math.abs(xPosition), end = start + width;\n  return {\n      'start': start,\n      'end': end,\n      'width': width\n  };\n}\n\n// slider for selecting a subregion of the chunk\nconst attachDraggableSlider = () => {\n  interact(`#${identifier}`)\n    .draggable({\n      inertia: true,\n      listeners: {\n        move(event) {\n          // respond to user moving slider\n          var target = event.target;\n          var x = (parseFloat(target.getAttribute('data-x')) || 0);\n          x += event.dx;\n          if (x >= 0 && x <= componentWidth - event.rect.width) {\n              target.style.webkitTransform = target.style.transform =\n                  'translate(' + x + 'px,' + '0px)'\n              target.setAttribute('data-x', x);\n          }\n        },\n        end(event) {\n          // once slider is released, update the redux store\n          let temp = {\"id\": identifier, \"boundaries\": getStartAndEnd(event.target)};\n          dispatch(changeSliderBoundaries(temp));\n        }\n      },\n    })\n    // slider has been resized\n    .resizable({\n      // resize from all edges and corners\n      edges: { left: true, right: true, bottom: false, top: false },\n      listeners: {\n          move(event) {\n            var target = event.target;\n            var x = (parseFloat(target.getAttribute('data-x')) || 0);\n            // update the element's style\n            target.style.width = event.rect.width + 'px';\n            // translate when resizing from left edges\n            x += event.deltaRect.left;\n            target.style.webkitTransform = target.style.transform =\n                'translate(' + x + 'px,' + '0px)'\n            target.setAttribute('data-x', x);\n          },\n          end(event) {\n            // depending on resize, may have to update x coord in redux store\n            let temp = {\"id\": identifier, \"boundaries\": getStartAndEnd(event.target)};\n            dispatch(changeSliderBoundaries(temp));\n          }\n      },\n      modifiers: [\n          // keep the edges inside the parent\n          interact.modifiers.restrictEdges({\n              outer: 'parent'\n          }),\n          // minimum size\n          interact.modifiers.restrictSize({\n              min: { width: 30 }\n          })\n      ],\n      inertia: true\n    });\n}\n\nconst draw = (ctx, data) => {\n  ctx.clearRect(0, 0, ctx.canvas.width, ctx.canvas.height);\n\n  const unit = componentWidth / data.length;\n  for (let f=0; f<filters.length; f++) {\n    for (let i=0; i<data.length; i++) {\n      if (filters[f] === \"ALL_WORDS\" || filters[f].toLowerCase() === data[i][\"word\"]) {\n        const colour = setColourScheme(props.colourScale, data[i][\"length\"]);\n        ctx.fillStyle = colour;\n        ctx.fillRect(i*unit, f*trackHeight, unit, trackHeight);\n      }\n    }\n  }\n  attachDraggableSlider();\n}\n\nuseEffect(() => {\n  const canvas = canvasRef.current;\n  const context = canvas.getContext('2d');\n\n  draw(context, data)\n}, [draw]);\n\nreturn (\n  <div className={`chunk-outer-wrapper ${identifier}`}>\n    <div className={`chunk-inner-wrapper ${identifier}`} style={{'width': componentWidth}}>\n      <div className={`chunk-window-wrapper ${identifier}`} style={{'width': componentWidth}}>\n        <div className={`chunk-slider`} id={identifier}\n          style={{ 'height': componentHeight + 10, 'width': sliderWidth }}>\n        </div>\n      </div>\n    </div>\n    <canvas \n      className={`chunk-view ${identifier}`} \n      width={componentWidth} \n      height={componentHeight}\n      ref={canvasRef} \n      {...props} \n    />\n  </div>\n)\n};\nexport default ChunkView;","import React, { useEffect, useRef, useState } from \"react\";\nimport { useSelector, useDispatch } from \"react-redux\";\nimport { componentHeight, componentWidth, margin, existingOptions } from \"../constants\";\nimport { findBoundariesOfCharacteristic, getSliderSelection } from \"../helpers/boundaries\";\nimport { changeTooltipVisibility, changeTooltipData } from \"../redux/reducers/dashboardSlice\";\nimport { setColourScheme } from \"../helpers/colours\";\n\nconst SubregionView = (props) => {\n  const canvasRef = useRef(null);\n  const dispatch = useDispatch();\n  const state = useSelector(state => state);\n  const dataType = state[\"dashboard\"][\"dataType\"];\n  const chunkSelection = state[\"global\"][\"chunkSelection\"][props.id];\n  const { start, end, width } = state[\"chunk\"][props.id]\n  const filters = state[\"dashboard\"][2];\n  const { low, high } = findBoundariesOfCharacteristic(props.data, \"length\");\n  const data = props.data[chunkSelection];\n  const headers = existingOptions[dataType][\"headers\"];\n  const selection = getSliderSelection(data, dataType, start, end);\n  const trackHeight = componentHeight / filters.length;\n  let calculatedSelection = [];\n\n  const mouseMove = (event) => {\n    const x = event.pageX;\n    const y = event.pageY;\n\n    var pageWidth = document.body.getBoundingClientRect().width,\n        canvasRect = event.currentTarget.getBoundingClientRect();\n    const xPosition = event.clientX - canvasRect.left,\n        yPosition = event.pageY - window.pageYOffset - canvasRect.top;\n\n      const unit = componentWidth / selection.length;\n      let selectionIndex = selection[Math.floor(xPosition/unit)];\n\n      const temp = {\n        'x': event.pageX + 100 > pageWidth ? event.pageX - 100 : event.pageX + 25,\n        'y': event.pageY + 25,\n        \"selection\": selectionIndex\n      }\n\n      dispatch(changeTooltipData(temp));\n      dispatch(changeTooltipVisibility(true));\n  }\n\n  const mouseLeave = () => {\n    dispatch(changeTooltipVisibility(false));\n  }\n\n  const draw = (ctx, selection) => {\n    ctx.clearRect(0, 0, ctx.canvas.width, ctx.canvas.height)\n\n    const unit = componentWidth / selection.length;\n\n    // draws the words selected in the dropdown\n    // TODO: generalize\n    for (let f=0; f<filters.length; f++) {\n      for (let i=0; i<selection.length; i++) {\n        const start = i * unit;\n        const end = start + unit;\n        calculatedSelection.push({...selection[i], \"calculatedStart\": start, \"calculatedEnd\": end});\n        if (filters[f] === \"ALL_WORDS\" || filters[f].toLowerCase() === selection[i][\"word\"]) {\n          const colour = setColourScheme(props.colourScale, selection[i][\"length\"]);\n          ctx.fillStyle = colour;\n          ctx.fillRect(start, f*trackHeight, unit, trackHeight);\n        }\n      }\n    }\n  }\n\n  useEffect(() => {\n    const canvas = canvasRef.current;\n    const context = canvas.getContext('2d');\n\n    draw(context, selection)\n  }, [draw]);\n  \n  return (\n    <div className=\"subregion-wrapper\">\n        <canvas \n        className=\"subregion-view\" \n        id=\"subregion\"\n        onMouseMove={mouseMove}\n        onMouseLeave={mouseLeave}\n        width={componentWidth} \n        height={componentHeight + 10}\n        ref={canvasRef}  \n        />\n    </div>\n\n  )\n};\nexport default SubregionView;","import Pride_and_Prejudice_data from \"./assets/Pride_and_Prejudice_data.json\";\nimport Alice_Wonderland_data from \"./assets/Alices_Adventures_in_Wonderland_data.json\";\nimport Sense_and_Sensibility_data from \"./assets/Sense_and_Sensibility_data.json\";\nimport Emma_data from \"./assets/Emma_data.json\";\n\nexport const dataFileManager = {\n    LITERATURE: {\n        PRIDE_AND_PREJUDICE: Pride_and_Prejudice_data,\n        ALICES_ADVENTURES_IN_WONDERLAND: Alice_Wonderland_data, \n        EMMA: Emma_data,\n        SENSE_AND_SENSIBILITY: Sense_and_Sensibility_data\n    },\n};\n","import React, { useState } from \"react\";\nimport { useSelector, useDispatch } from \"react-redux\";\nimport _ from \"lodash\";\nimport GlobalView from \"./GlobalView\";\nimport ChunkView from \"./ChunkView\";\nimport SubregionView from \"./SubregionView\";\nimport { dataFileManager } from \"../dataFileManager\";\n\nconst Track = ({trackType, colourScale}) => {\n\n    const state = useSelector(state => state);\n    const tracks = state[\"dashboard\"][1];\n    const dataType = state[\"dashboard\"][\"dataType\"];\n    const data = dataFileManager[dataType];\n\n    const constructElement = (trackType, trackData, id, colourScale) => {\n      // global view\n      if (trackType === 1) return constructTrack1(trackData, id, colourScale);\n      // chunk view\n      else if (trackType === 2) return constructTrack2(trackData, id, colourScale);\n      // subregion view\n      else if (trackType === 3) return constructTrack3(trackData, id, colourScale);\n    }\n\n    const constructTrack1 = (trackData, id, colourScale) => {\n      return (\n        <GlobalView data={trackData} id={id} colourScale={colourScale} />\n      );\n    }\n\n    const constructTrack2 = (trackData, id, colourScale) => {\n        return (\n          <ChunkView data={trackData} id={id} colourScale={colourScale}  />\n        );\n    }\n\n    const constructTrack3 = (trackData, id, colourScale) => {\n        return (\n          <SubregionView data={trackData} id={id} colourScale={colourScale} />\n        );\n    }\n\n    // Generate list of components depending on which track type is selected\n    const elements = tracks.map((t, i) => {\n    \n      return (\n        <div key={\"element-\"+i} className=\"dashboard-container track-row-2\">\n          {/* <p className=\"side-label\">{t}</p> */}\n          {constructElement(trackType, data[t], t, colourScale)}\n        </div>\n      )\n    });\n\n    return (\n      <div className=\"track\">\n        {elements}\n      </div>\n    )\n}\nexport default Track;","import React, { useEffect, useRef } from \"react\";\nimport { componentWidth } from \"../constants\";\nimport { setColourScheme } from \"../helpers/colours\";\n\nconst Legend = (props) => {\n  const canvasRef = useRef(null);\n  let startX, legendWidth;\n\n  const draw = (ctx) => {\n    ctx.clearRect(0, 0, ctx.canvas.width, ctx.canvas.height);\n    legendWidth = componentWidth * 0.6;\n    startX = 0;\n    const startY = 10;\n\n    const unit = legendWidth / (props.high - props.low);\n\n    // using data's colour scheme fill in the legend\n    for (let i=props.low; i<=props.high; i++) {\n        const colour = setColourScheme(props.colourScale, i);\n        ctx.fillStyle = colour;\n        ctx.fillRect(startX + unit * i, startY, unit, 25);\n\n        // label start, end and every 5th chunk\n        if (i === props.low || i === props.high || i % 5 === 0) {\n            ctx.beginPath();\n            ctx.font = \"10px Arial\";\n            ctx.fillStyle = 'white';\n            ctx.fillText(i, startX + i * unit + unit/2 - 5, startY + 40);\n        }\n    }\n  }\n\n  useEffect(() => {\n    const canvas = canvasRef.current;\n    const context = canvas.getContext('2d');\n\n    draw(context)\n  }, [draw]);\n  \n  return (\n    <div>\n      <p>{props.label}</p>\n        <canvas \n            className=\"legend\" \n            width={componentWidth * 0.6} \n            height={75}\n            ref={canvasRef} \n            {...props} \n        />\n    </div>\n  );\n};\nexport default Legend;","import React from \"react\";\nimport _ from \"lodash\";\nimport { useSelector } from \"react-redux\";\nimport { scaleLog } from \"d3\";\nimport \"./main.css\";\nimport Dashboard from \"./components/Dashboard\";\nimport Track from \"./components/Track\";\nimport { existingOptions, } from \"./constants\";\nimport { dataFileManager } from \"./dataFileManager\";\nimport Legend from \"./components/Legend\";\nimport { findBoundariesOfCharacteristic } from \"./helpers/boundaries\";\n\nfunction App() {\n\n  const state = useSelector(state => state);\n  const dataType = state[\"dashboard\"][\"dataType\"];\n  const headers = existingOptions[dataType][\"headers\"];\n  const tracks = state[\"dashboard\"][1];\n  const data = dataFileManager[dataType];\n\n  // set the colour scale wrt all of the selected items' boundaries\n  let low = Infinity;\n  let high = -Infinity;\n  for (let i=0; i<tracks.length; i++) {\n    const value = findBoundariesOfCharacteristic(data[tracks[i]], \"length\");\n    if (value.low < low) low = value.low;\n    if (value.high > high) high = value.high;\n  }\n  var colourScale = scaleLog()\n  .domain([low, high])\n  .range([0, 1]);\n  \n  const elements = headers.map((el, i) => {\n    return (\n      <div>\n        <h2>{el}</h2>\n        <Track trackType={i+1} colourScale={colourScale} />\n      </div>\n    );\n  });\n\n  return (\n    <div className=\"main-app\">\n      <Dashboard />\n      {elements}\n      <Legend colourScale={colourScale} low={low} high={high} label={existingOptions[dataType].legendLabel} />\n    </div>\n  );\n}\n\nexport default App;\n","import { existingOptions } from \"../../constants\";\nimport { initializeRecord } from \"../../helpers/record\";\n\nconst initialOptions = Object.values(existingOptions).reduce((data, k) => {\n    data.push(Object.keys(k[\"dashboard\"][1][\"options\"])[0]);\n    return data;\n}, []);\n\n\nconst initialState = initializeRecord(initialOptions, {\"tooltipVisibility\": false});\n\nexport const changeTooltipVisibility = (vis) => {\n    return {\n        type: \"subregion/tooltipVisibilityChanged\",\n        payload: vis\n    };\n}\n\nexport const subregionReducer = (state = initialState, action) => {\n    switch(action.type) {\n        case \"subregion/tooltipVisibilityChanged\":\n            return {\n                ...state,\n                [action.payload.key]: action.payload.value\n            };\n        default:\n            return state;\n    };\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { configureStore } from '@reduxjs/toolkit'\nimport { Provider } from \"react-redux\";\nimport { HashRouter, Routes, Route } from \"react-router-dom\";\nimport App from \"./App\";\nimport { dashboardReducer } from './redux/reducers/dashboardSlice';\nimport { globalReducer } from './redux/reducers/globalSlice';\nimport { chunkReducer } from \"./redux/reducers/chunkSlice\";\nimport { subregionReducer } from \"./redux/reducers/subregionSlice\";\n\n\nconst store = configureStore({\n  reducer: {\n    dashboard: dashboardReducer,\n    global: globalReducer,\n    chunk: chunkReducer,\n    subregion: subregionReducer,\n  },\n});\n\nReactDOM.render(\n  \n  <React.StrictMode>\n    <Provider store={store}>\n      <HashRouter>\n        <Routes>\n          <Route path=\"/\" element={<App />} />\n        </Routes>\n        \n      </HashRouter>\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}